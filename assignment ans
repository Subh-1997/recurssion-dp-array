1.Nth Fibonacci Number
class Solution {
     static int mod = 1000000007;
    static int nthFibonacci(int n){
    //   int memo[]=new int[n+1];
    //   if(n<=1){
    //       return n;
    //   }
    //   if(memo[n]!=0)return memo[n];
    //   return memo[n] = nthFibonacci(n-1)+nthFibonacci(n-2);
    //  if(n==1)return 1;
    //   int secondLast = 0;
    //   int last = 1;
    //   int cur=0;
    //   for (int i = 2; i <= n; i++) {
    //     cur = last + secondLast;
    //     secondLast = last;
    //     last = cur;
    //   }
    //   return cur;
    
    // int fib[] = new int[n + 1];
    //   fib[0] = 0;
    //   fib[1] = 1;
    //   for (int i = 2; i <= n; i++) {
    //     fib[i] = fib[i - 1] + fib[i - 2];
    //   }
    //   return fib[n];
       
        int dp[]=new int[n+1];
       
        dp[0]=0;
       
        dp[1]=1;
        for(int i=2;i<=n;i++){
            
            dp[i]=(dp[i-1]+ dp[i-2])%mod;
        }
        
        return dp[n];
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.Power Of Numbers
class Solution
{
        
    long power(int N,int R)
    {
        if(R==0) return 1;
        
        if(R%2==0){
         return power(N,R/2)*power(N,R/2)%1000000007;
        }else{
            return N*power(N,R/2)*power(N,R/2)%1000000007;
        }
    }

}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
